generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  name              String?
  password          String
  role              Role              @default(CANDIDATE)
  status            Boolean           @default(true)
  candidate_profile CandidateProfile?

  companies Company[]
}

model CandidateProfile {
  id         Int      @id @default(autoincrement())
  full_name  String
  gender     Gender
  phone      String
  cv         String
  birthdate  DateTime @db.Date
  address    String
  openToWork Boolean  @default(false)
  status     Boolean  @default(true)
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int      @unique

  candidateLanguages  CandidateLanguage[]
  candidateEducations CandidateEducation[]
  CandidateSkill      CandidateSkill[]
  CandidateExperience CandidateExperience[]
}

model Language {
  name               String              @id
  candidateLanguages CandidateLanguage[]
}

model CandidateLanguage {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int
  language           Language         @relation(fields: [languageName], references: [name])
  languageName       String
  level              Level            @default(BASIC)

  @@unique([candidateProfileId, languageName])
}

model Education {
  id   Int    @id @default(autoincrement())
  name String
  map  String

  candidateEducations CandidateEducation[]
}

model CandidateEducation {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int

  education   Education @relation(fields: [educationId], references: [id])
  educationId Int

  major     String
  degree    Degree @default(BACHELOR)
  yearStart Int
  yearEnd   Int

  @@id([candidateProfileId, educationId])
}

model Skill {
  name           String           @id
  CandidateSkill CandidateSkill[]
}

model CandidateSkill {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int

  skill     Skill  @relation(fields: [skillName], references: [name])
  skillName String

  @@id([candidateProfileId, skillName])
}

model CandidateExperience {
  id               Int       @id @default(autoincrement())
  company          String
  department       String
  startDate        DateTime  @db.Date
  endDate          DateTime? @db.Date
  responsibilities String

  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int
}

model Company {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  teamSize          Int      @default(50)
  establishmentDate DateTime @db.Date
  views             Int      @default(0)
  websiteUrl        String
  isApproved        Boolean  @default(false)
  mapLink           String?
  address           String

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum Degree {
  BACHELOR
  MASTER
  ENGINEER
}

enum Level {
  NATIVE
  FLUENT
  BASIC
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}
