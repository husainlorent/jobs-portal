generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  name              String?
  password          String
  role              Role              @default(CANDIDATE)
  status            Boolean           @default(true)
  candidate_profile CandidateProfile?

  companies         Company[]
  jobs              Job[]
  recruiterPackages RecruiterPackage[]
  orders            Order[]
}

model CandidateProfile {
  id         Int      @id @default(autoincrement())
  full_name  String
  gender     Gender
  phone      String
  cv         String
  birthdate  DateTime @db.Date
  address    String
  openToWork Boolean  @default(false)
  status     Boolean  @default(true)
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int      @unique

  candidateLanguages  CandidateLanguage[]
  candidateEducations CandidateEducation[]
  CandidateSkill      CandidateSkill[]
  CandidateExperience CandidateExperience[]
  Apply               Apply[]
}

model Language {
  name               String              @id
  candidateLanguages CandidateLanguage[]
}

model CandidateLanguage {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId Int
  language           Language         @relation(fields: [languageName], references: [name], onDelete: Cascade)
  languageName       String
  level              Level            @default(BASIC)

  @@unique([candidateProfileId, languageName])
}

model Education {
  id   Int    @id @default(autoincrement())
  name String
  map  String

  candidateEducations CandidateEducation[]
}

model CandidateEducation {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId Int

  education   Education @relation(fields: [educationId], references: [id])
  educationId Int

  major     String
  degree    Degree @default(BACHELOR)
  yearStart Int
  yearEnd   Int

  @@id([candidateProfileId, educationId])
}

model Skill {
  name           String           @id
  CandidateSkill CandidateSkill[]
  JobSkill       JobSkill[]
}

model CandidateSkill {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id], onDelete: Cascade)
  candidateProfileId Int

  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String

  @@id([candidateProfileId, skillName])
}

model CandidateExperience {
  id               Int       @id @default(autoincrement())
  company          String
  department       String
  startDate        DateTime  @db.Date
  endDate          DateTime? @db.Date
  responsibilities String

  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int
}

model Company {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  teamSize          Int      @default(50)
  establishmentDate DateTime @db.Date
  views             Int      @default(0)
  websiteUrl        String
  isApproved        Boolean  @default(false)
  mapLink           String?
  address           String

  user            User              @relation(fields: [userId], references: [id])
  userId          Int
  CompanyImages   CompanyImage[]
  CompanyIndustry CompanyIndustry[]
  Job             Job[]
}

model CompanyImage {
  id        Int     @id @default(autoincrement())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  imageUrl String
}

model Industry {
  name            String            @id
  CompanyIndustry CompanyIndustry[]
}

model CompanyIndustry {
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  industry     Industry @relation(fields: [industryName], references: [name], onDelete: Cascade)
  industryName String

  @@id([companyId, industryName])
}

model Job {
  id        Int     @id @default(autoincrement())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  postBy   User @relation(fields: [postById], references: [id])
  postById Int

  jobRole     JobRole @relation(fields: [jobRoleName], references: [name], onDelete: Cascade)
  jobRoleName String

  title       String
  description String
  status      JobStatus @default(PENDING)
  minSalary   Float
  maxSalary   Float?

  totalViews Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  isDeleted Boolean @default(false)

  jobSkills JobSkill[]
  jobBenefits JobBenefit[]
  applies Apply[]
}

model JobSkill {
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId Int

  skill     Skill  @relation(fields: [skillName], references: [name], onDelete: Cascade)
  skillName String

  @@id([jobId, skillName])
}

model Benefit {
  name String @id

  jobBenefits JobBenefit[]
}

model JobBenefit {
  job   Job @relation(fields: [jobId], references: [id])
  jobId Int

  benefit     Benefit @relation(fields: [benefitName], references: [name], onDelete: Cascade)
  benefitName String

  @@id([jobId, benefitName])
}

model Apply {
  candidateProfile   CandidateProfile @relation(fields: [candidateProfileId], references: [id])
  candidateProfileId Int

  job   Job @relation(fields: [jobId], references: [id])
  jobId Int

  applyDate DateTime    @default(now())
  status    ApplyStatus @default(PENDING)

  @@id([candidateProfileId, jobId])
}

model Package {
  id           Int     @id @default(autoincrement())
  label        String
  price        Float
  jobPostLimit Int
  isActive     Boolean @default(true)

  recruiterPackages RecruiterPackage[]
  orders            Order[]
}

model RecruiterPackage {
  id Int @id @default(autoincrement())

  recruiter   User @relation(fields: [recruiterId], references: [id])
  recruiterId Int

  package   Package @relation(fields: [packageId], references: [id])
  packageId Int

  startDate DateTime @default(now()) @db.Date
  endDate   DateTime
}

model Order {
  id          Int  @id @default(autoincrement())
  recruiter   User @relation(fields: [recruiterId], references: [id])
  recruiterId Int

  package   Package @relation(fields: [packageId], references: [id])
  packageId Int

  totalPrice Float       @default(0)
  status     OrderStatus @default(PENDING)
  orderDate  DateTime    @default(now()) @db.Date
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ApplyStatus {
  PENDING
  VIEWED
  APPROVED
}

model JobRole {
  name String @id

  // jobs Job[]
  Job Job[]
}

enum JobStatus {
  PENDING
  ACTIVE
  EXPIRED
  REJECTED
}

enum Degree {
  BACHELOR
  MASTER
  ENGINEER
}

enum Level {
  NATIVE
  FLUENT
  BASIC
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  CANDIDATE
  RECRUITER
}
